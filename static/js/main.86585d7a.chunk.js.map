{"version":3,"sources":["components/NotFound/NotFound.tsx","components/Posts/Posts.tsx","api/api.ts","redux/UserReducer.ts","components/UsersList/UsersList.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["NotFound","className","Posts","getInfoFromServer","addUrl","a","fetch","method","response","json","catch","error","Error","result","userReducer","createSlice","name","initialState","users","textError","reducers","setUsersInfo","state","action","payload","setTextError","selectors","actions","reducer","UsersList","usersFromServer","useSelector","dispatch","useDispatch","urlUsers","console","log","useEffect","gottenUsers","map","user","id","username","App","path","index","element","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8VAGaA,EAAqB,WAChC,OACE,qBAAKC,UAAU,WAAf,qCCFSC,G,MAAkB,WAC7B,OACE,qBAAKD,UAAU,QAAf,qB,yBCDSE,EAAiB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACRC,MAAM,GAAD,OAHd,yCAGc,OAAcF,GAAU,CAAEG,OAAQ,QAD/B,cACzBC,EADyB,gBAGVA,EAASC,OAC3BC,OAAM,SAACC,GACN,MAAMC,MAAM,GAAD,OAAID,OALY,cAGzBE,EAHyB,yBAQxBA,GARwB,2CAAH,sD,eCSxBC,EAAcC,YAAY,CAC9BC,KAAM,WACNC,aAPiC,CACjCC,MAAO,GACPC,UAAW,IAMXC,SAAU,CACRC,aAAc,SAACC,EAAOC,GACpB,OAAO,2BACFD,GADL,IAEEJ,MAAOK,EAAOC,WAGlBC,aAAc,SAACH,EAAOC,GACpB,OAAO,2BACFD,GADL,IAEEH,UAAWI,EAAOC,cAMbE,EACG,SAACJ,GAAD,OAAyBA,EAAMJ,OAIxC,EAGHJ,EAAYa,QAFdN,EADK,EACLA,aACAI,EAFK,EAELA,aAGaG,EAAYd,EAAZc,QCnCFC,G,MAAsB,WACjC,IAAMC,EAAkBC,YAAYL,GAC9BM,EAAWC,cACXC,EAAW,QAmBjB,OAhBAC,QAAQC,IAAIN,GAEZO,qBAAU,WAAM,4CACd,4BAAAhC,EAAA,+EAE8BF,EAAkB+B,GAFhD,OAEUI,EAFV,OAIIN,EAASX,EAAaiB,IAJ1B,gDAMIN,EAASP,EAAa,uBAN1B,0DADc,uBAAC,WAAD,wBAWdjB,KACC,IAGD,sBAAKP,UAAU,YAAf,kBAEE,oBAAIA,UAAU,kBAAd,SACG6B,EAAgBS,KAAI,SAACC,GAAD,OACnB,qBACEvC,UAAU,kBADZ,UAIGuC,EAAKC,GACLD,EAAKxB,KACLwB,EAAKE,WAJDF,EAAKC,cC7BTE,EAAgB,WAC3B,OACE,qBAAK1C,UAAU,MAAf,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAO2C,KAAK,IAAZ,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOF,KAAK,SAASE,QAAS,cAAC,EAAD,SAEhC,cAAC,IAAD,CAAOF,KAAK,IAAIE,QAAS,cAAC,EAAD,YCVlBC,EAFDC,YAAe,CAAEpB,YCK/BqB,IAASC,OACP,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,IAAMI,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.86585d7a.chunk.js","sourcesContent":["import React from 'react';\nimport './NotFound.scss';\n\nexport const NotFound: React.FC = () => {\n  return (\n    <div className=\"NotFound\">\n      This page is not found\n    </div>\n  );\n};\n","import React from 'react';\nimport './Posts.scss';\n\nexport const Posts: React.FC = () => {\n  return (\n    <div className=\"Posts\">Posts</div>\n  );\n};\n","import { User } from '../Types/UserType';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getInfoFromServer = async (addUrl: string): Promise<User[]> => {\n  const response = await fetch(`${API_URL}${addUrl}`, { method: 'GET' });\n\n  const result = await response.json()\n    .catch((error) => {\n      throw Error(`${error}`);\n    });\n\n  return result;\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { User } from '../Types/UserType';\n\ninterface InitialState {\n  users: User[],\n  textError: string,\n}\n\nconst initialState: InitialState = {\n  users: [],\n  textError: '',\n};\n\nconst userReducer = createSlice({\n  name: 'userInfo',\n  initialState,\n  reducers: {\n    setUsersInfo: (state, action) => {\n      return {\n        ...state,\n        users: action.payload,\n      };\n    },\n    setTextError: (state, action) => {\n      return {\n        ...state,\n        textError: action.payload,\n      };\n    },\n  },\n});\n\nexport const selectors = {\n  getUsersInfo: (state: InitialState) => state.users,\n  getTextError: (state: InitialState) => state.textError,\n};\n\nexport const {\n  setUsersInfo,\n  setTextError,\n} = userReducer.actions;\n\nexport const { reducer } = userReducer;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getInfoFromServer } from '../../api/api';\nimport { selectors, setTextError, setUsersInfo } from '../../redux/UserReducer';\nimport { User } from '../../Types/UserType';\nimport './UsersList.scss';\n\nexport const UsersList: React.FC = () => {\n  const usersFromServer = useSelector(selectors.getUsersInfo);\n  const dispatch = useDispatch();\n  const urlUsers = 'users';\n\n  // eslint-disable-next-line no-console\n  console.log(usersFromServer);\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const gottenUsers = await getInfoFromServer(urlUsers);\n\n        dispatch(setUsersInfo(gottenUsers));\n      } catch {\n        dispatch(setTextError('Can not load users'));\n      }\n    }\n\n    response();\n  }, []);\n\n  return (\n    <div className=\"UsersList\">\n      Hello\n      <ul className=\"UsersList__list\">\n        {usersFromServer.map((user: User) => (\n          <li\n            className=\"UsersLict__item\"\n            key={user.id}\n          >\n            {user.id}\n            {user.name}\n            {user.username}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport './App.scss';\nimport { NotFound } from './components/NotFound';\nimport { Posts } from './components/Posts';\nimport { UsersList } from './components/UsersList';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/\">\n          <Route index element={<UsersList />} />\n          <Route path=\"userId\" element={<Posts />} />\n        </Route>\n        <Route path=\"*\" element={<NotFound />} />\n      </Routes>\n    </div>\n  );\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport { reducer } from './UserReducer';\n\nconst store = configureStore({ reducer });\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport './index.scss';\nimport { App } from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}