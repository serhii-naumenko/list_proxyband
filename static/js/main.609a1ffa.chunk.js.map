{"version":3,"sources":["components/NotFound/NotFound.tsx","redux/UserReducer.ts","components/Posts/Posts.tsx","api/api.ts","components/Loader/Loader.tsx","components/ModalContent/ModalContent.tsx","components/UsersTable/UsersTable.tsx","components/UsersInfo/UsersInfo.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["NotFound","className","postsFromStorage","localStorage","getItem","postsToRender","JSON","parse","nameFromStorage","nameToTitle","initialState","users","posts","albums","chosenPosts","chosenName","userReducer","createSlice","name","reducers","setUsersInfo","state","action","payload","setPostsInfo","setAlbumsInfo","setChosenPosts","setChosenNameStore","selectors","actions","reducer","Posts","useSelector","chosenNameStore","useState","setChosenName","navigate","useNavigate","handlerReturn","useCallback","useEffect","type","title","onClick","map","post","id","body","getInfoFromServer","addUrl","a","fetch","method","response","json","catch","error","Error","result","Loader","Spinner","caption","ModalContent","chosenAlbums","modalIsClose","album","customStyles","overlay","backgroundColor","content","top","left","right","bottom","padding","Modal","setAppElement","UsersTable","usersFromServer","gottenPosts","gottenAlbums","dispatch","useDispatch","isOpen","setIsOpen","setChosenAlbums","handlerPosts","chosenId","filter","userId","chosenUser","find","user","setItem","stringify","window","open","handlerAlbums","albumsToRender","username","onRequestClose","style","contentLabel","UsersList","textError","setTextError","usersStart","gottenUsers","length","App","path","index","element","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.609a1ffa.chunk.js","sourcesContent":["import React from 'react';\nimport './NotFound.scss';\n\nexport const NotFound: React.FC = () => {\n  return (\n    <div className=\"NotFound\">\n      This page is not found\n    </div>\n  );\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { Album } from '../Types/AlbumType';\nimport { Post } from '../Types/PostType';\nimport { User } from '../Types/UserType';\n\nconst postsFromStorage = localStorage.getItem('posts');\nlet postsToRender = [];\n\nif (postsFromStorage !== null) {\n  postsToRender = JSON.parse(postsFromStorage);\n}\n\nconst nameFromStorage = localStorage.getItem('name');\nlet nameToTitle = '';\n\nif (nameFromStorage !== null) {\n  nameToTitle = JSON.parse(nameFromStorage);\n}\n\ninterface InitialState {\n  users: User[],\n  posts: Post[],\n  albums: Album[],\n  chosenPosts: Post[],\n  chosenName: string,\n}\n\nconst initialState: InitialState = {\n  users: [],\n  posts: [],\n  albums: [],\n  chosenPosts: postsToRender,\n  chosenName: nameToTitle,\n};\n\nconst userReducer = createSlice({\n  name: 'userInfo',\n  initialState,\n  reducers: {\n    setUsersInfo: (state, action) => {\n      return {\n        ...state,\n        users: action.payload,\n      };\n    },\n    setPostsInfo: (state, action) => {\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    },\n    setAlbumsInfo: (state, action) => {\n      return {\n        ...state,\n        albums: action.payload,\n      };\n    },\n    setChosenPosts: (state, action) => {\n      return {\n        ...state,\n        chosenPosts: action.payload,\n      };\n    },\n    setChosenNameStore: (state, action) => {\n      return {\n        ...state,\n        chosenName: action.payload,\n      };\n    },\n  },\n});\n\nexport const selectors = {\n  getUsersInfo: (state: InitialState) => state.users,\n  getPostsInfo: (state: InitialState) => state.posts,\n  getAlbumsInfo: (state: InitialState) => state.albums,\n  getChosenPosts: (state: InitialState) => state.chosenPosts,\n  getChosenNameStore: (state: InitialState) => state.chosenName,\n};\n\nexport const {\n  setUsersInfo,\n  setPostsInfo,\n  setAlbumsInfo,\n  setChosenPosts,\n  setChosenNameStore,\n} = userReducer.actions;\n\nexport const { reducer } = userReducer;\n","import React, {\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { selectors } from '../../redux/UserReducer';\nimport './Posts.scss';\n\nexport const Posts: React.FC = () => {\n  const chosenPosts = useSelector(selectors.getChosenPosts);\n  const chosenNameStore = useSelector(selectors.getChosenNameStore);\n  const [chosenName, setChosenName] = useState(chosenNameStore);\n  const navigate = useNavigate();\n\n  const handlerReturn = useCallback(() => {\n    navigate('/');\n  }, []);\n\n  useEffect(() => {\n    const name = chosenNameStore;\n\n    setChosenName(name);\n  }, [chosenName]);\n\n  return (\n    <div className=\"Posts\">\n      <button\n        type=\"button\"\n        title=\"Return to the list of users\"\n        className=\"Posts__returnUsers\"\n        onClick={handlerReturn}\n      >\n        Return to the list of users\n      </button>\n      <h1 className=\"Posts__name\">\n        {`Posts of the user ${chosenName}`}\n      </h1>\n      <ul className=\"Posts__list\">\n        {chosenPosts.map((post) => (\n          <li\n            className=\"Posts__item\"\n            key={post.id}\n          >\n            <p className=\"Posts__id\">\n              {`ID - ${post.id}`}\n            </p>\n            <h2 className=\"Posts__title\">\n              {post.title}\n            </h2>\n            <p className=\"Posts__text\">\n              {post.body}\n            </p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getInfoFromServer = async <MyType>(addUrl: string): Promise<MyType> => {\n  const response = await fetch(`${API_URL}${addUrl}`, { method: 'GET' });\n\n  const result = await response.json()\n    .catch((error) => {\n      throw Error(`${error}`);\n    });\n\n  return result;\n};\n","import React from 'react';\nimport { Spinner } from '@skbkontur/react-ui';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => {\n  return (\n    <div className=\"Loader\">\n      <div className=\"Loader__container\">\n        <Spinner type=\"big\" caption=\"Loader...\" />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Album } from '../../Types/AlbumType';\nimport './ModalContent.scss';\n\ninterface Props {\n  chosenAlbums: Album[],\n  chosenName: string,\n  modalIsClose: () => void,\n}\n\nexport const ModalContent: React.FC<Props> = ({\n  chosenAlbums,\n  chosenName,\n  modalIsClose,\n}) => {\n  return (\n    <div className=\"ModalContent\">\n      <button\n        type=\"button\"\n        title=\"close the popup\"\n        className=\"ModalContent__button\"\n        onClick={modalIsClose}\n      >\n        X\n      </button>\n      <h1 className=\"ModalContent__title\">\n        {`Albums of the user ${chosenName}`}\n      </h1>\n      <ul className=\"ModalContent__list\">\n        {chosenAlbums.map((album) => (\n          <li\n            className=\"ModalContent__item\"\n            key={album.id}\n          >\n            <div className=\"ModalContent__container\">\n              <p className=\"ModalContent__album-id\">\n                {`ID - ${album.id}`}\n              </p>\n              <p className=\"ModalContent__album-title\">\n                {album.title}\n              </p>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport Modal from 'react-modal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectors, setChosenNameStore, setChosenPosts } from '../../redux/UserReducer';\nimport { Album } from '../../Types/AlbumType';\nimport { User } from '../../Types/UserType';\nimport { ModalContent } from '../ModalContent';\nimport './UsersTable.scss';\n\nconst customStyles = {\n  overlay: { backgroundColor: 'grey' },\n  content: {\n    top: '50px',\n    left: '150px',\n    right: '150px',\n    bottom: '50px',\n    padding: '10px 80px',\n  },\n};\n\nModal.setAppElement('#root');\n\nexport const UsersTable: React.FC = () => {\n  const usersFromServer = useSelector(selectors.getUsersInfo);\n  const gottenPosts = useSelector(selectors.getPostsInfo);\n  const gottenAlbums = useSelector(selectors.getAlbumsInfo);\n  const dispatch = useDispatch();\n  const [isOpen, setIsOpen] = useState(false);\n  const [chosenAlbums, setChosenAlbums] = useState<Album[]>([]);\n  const [chosenName, setChosenName] = useState('');\n\n  const handlerPosts = useCallback((chosenId) => {\n    const chosenPosts = gottenPosts.filter((post) => post.userId === chosenId);\n    const chosenUser = usersFromServer.find((user) => user.id === chosenId);\n\n    if (chosenUser) {\n      dispatch(setChosenNameStore(chosenUser.name));\n      localStorage.setItem('name', JSON.stringify(chosenUser.name));\n    }\n\n    dispatch(setChosenPosts(chosenPosts));\n    localStorage.setItem('posts', JSON.stringify(chosenPosts));\n\n    window.open(`/#/${chosenId}`, '_blank');\n  }, [gottenPosts]);\n\n  const handlerAlbums = useCallback((chosenId) => {\n    const albumsToRender = gottenAlbums.filter((album) => album.userId === chosenId);\n    const chosenUser = usersFromServer.find((user) => user.id === chosenId);\n\n    if (chosenUser) {\n      setChosenName(chosenUser.name);\n    }\n\n    setIsOpen(true);\n    setChosenAlbums(albumsToRender);\n  }, [gottenAlbums, isOpen]);\n\n  const modalIsClose = useCallback(() => {\n    setIsOpen(false);\n  }, [isOpen]);\n\n  return (\n    <>\n      {usersFromServer.map((user: User) => (\n        <tr\n          className=\"UsersTable__row\"\n          key={user.id}\n        >\n          <td className=\"UsersTable__text\">\n            {user.id}\n          </td>\n          <td className=\"UsersTable__text\">\n            {user.name}\n          </td>\n          <td className=\"UsersTable__text\">\n            {user.username}\n          </td>\n          <td className=\"UsersTable__text\">\n            <button\n              type=\"button\"\n              title=\"show the posts of the user\"\n              className=\"UsersTable__posts-albums\"\n              onClick={() => handlerPosts(user.id)}\n            >\n              posts\n            </button>\n          </td>\n          <td className=\"UsersTable__text\">\n            <button\n              type=\"button\"\n              title=\"show the Albums of the user\"\n              className=\"UsersTable__posts-albums\"\n              onClick={() => handlerAlbums(user.id)}\n            >\n              albums\n            </button>\n          </td>\n        </tr>\n      ))}\n      <Modal\n        isOpen={isOpen}\n        onRequestClose={modalIsClose}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n        <ModalContent\n          chosenAlbums={chosenAlbums}\n          chosenName={chosenName}\n          modalIsClose={modalIsClose}\n        />\n      </Modal>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getInfoFromServer } from '../../api/api';\nimport {\n  selectors,\n  setAlbumsInfo,\n  setPostsInfo,\n  setUsersInfo,\n} from '../../redux/UserReducer';\nimport { Album } from '../../Types/AlbumType';\nimport { Post } from '../../Types/PostType';\nimport { User } from '../../Types/UserType';\nimport { Loader } from '../Loader';\nimport { UsersTable } from '../UsersTable';\nimport './UsersInfo.scss';\n\nexport const UsersList: React.FC = () => {\n  const [textError, setTextError] = useState('');\n  const usersStart = useSelector(selectors.getUsersInfo);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const gottenUsers = await getInfoFromServer<User[]>('users');\n        const gottenPosts = await getInfoFromServer<Post[]>('posts');\n        const gottenAlbums = await getInfoFromServer<Album[]>('albums');\n\n        dispatch(setUsersInfo(gottenUsers));\n        dispatch(setPostsInfo(gottenPosts));\n        dispatch(setAlbumsInfo(gottenAlbums));\n        setTextError('');\n      } catch {\n        setTextError('Something went wrong. Reload the page, please.');\n      }\n    }\n\n    response();\n  }, []);\n\n  if (usersStart.length === 0) {\n    return (<Loader />);\n  }\n\n  return (\n    <div className=\"UsersInfo\">\n      <p className=\"UsersInfo__textError\">\n        {textError}\n      </p>\n      {!textError && (\n        <>\n          <table className=\"UsersInfo__table\">\n            <caption className=\"UsersInfo__title\">\n              Information about users\n            </caption>\n            <thead className=\"UsersInfo__head\">\n              <tr\n                className=\"UsersInfo__head--row\"\n              >\n                <th\n                  className=\"UsersInfo__head--cell\"\n                >\n                  ID\n                </th>\n                <th\n                  className=\"UsersInfo__head--cell\"\n                >\n                  Name\n                </th>\n                <th\n                  className=\"UsersInfo__head--cell\"\n                >\n                  Username\n                </th>\n                <th\n                  className=\"UsersInfo__head--cell\"\n                >\n                  Posts of the chosen user\n                </th>\n                <th\n                  className=\"UsersInfo__head--cell\"\n                >\n                  Albums of the chosen user\n                </th>\n              </tr>\n            </thead>\n            <tbody\n              className=\"UsersInfo__body\"\n            >\n              <UsersTable />\n            </tbody>\n          </table>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport './App.scss';\nimport { NotFound } from './components/NotFound';\nimport { Posts } from './components/Posts';\nimport { UsersList } from './components/UsersInfo';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/\">\n          <Route index element={<UsersList />} />\n          <Route path=\":userId\" element={<Posts />} />\n        </Route>\n        <Route path=\"*\" element={<NotFound />} />\n      </Routes>\n    </div>\n  );\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport { reducer } from './UserReducer';\n\nconst store = configureStore({ reducer });\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport './index.scss';\nimport { App } from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}