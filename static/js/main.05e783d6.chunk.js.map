{"version":3,"sources":["components/NotFound/NotFound.tsx","redux/UserReducer.ts","components/Posts/Posts.tsx","api/api.ts","components/UsersTable/UsersTable.tsx","components/UsersInfo/UsersInfo.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["NotFound","className","userReducer","createSlice","name","initialState","users","posts","albums","chosenPosts","chosenAlbums","reducers","setUsersInfo","state","action","payload","setPostsInfo","setAlbumsInfo","setChosenPosts","setChosenAlbums","selectors","actions","reducer","Posts","useSelector","navigate","useNavigate","console","log","handlerReturn","useCallback","type","title","onClick","map","post","id","body","getInfoFromServer","addUrl","a","fetch","method","response","json","catch","error","Error","result","UsersTable","usersFromServer","gottenPosts","dispatch","useDispatch","handlerPosts","chosenId","filter","userId","user","username","UsersList","useState","textError","setTextError","useEffect","gottenUsers","gottenAlbums","App","path","index","element","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05e783d6.chunk.js","sourcesContent":["import React from 'react';\nimport './NotFound.scss';\n\nexport const NotFound: React.FC = () => {\n  return (\n    <div className=\"NotFound\">\n      This page is not found\n    </div>\n  );\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { Album } from '../Types/AlbumType';\nimport { Post } from '../Types/PostType';\nimport { User } from '../Types/UserType';\n\ninterface InitialState {\n  users: User[],\n  posts: Post[],\n  albums: Album[],\n  chosenPosts: Post[],\n  chosenAlbums: Album[],\n}\n\nconst initialState: InitialState = {\n  users: [],\n  posts: [],\n  albums: [],\n  chosenPosts: [],\n  chosenAlbums: [],\n};\n\nconst userReducer = createSlice({\n  name: 'userInfo',\n  initialState,\n  reducers: {\n    setUsersInfo: (state, action) => {\n      return {\n        ...state,\n        users: action.payload,\n      };\n    },\n    setPostsInfo: (state, action) => {\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    },\n    setAlbumsInfo: (state, action) => {\n      return {\n        ...state,\n        albums: action.payload,\n      };\n    },\n    setChosenPosts: (state, action) => {\n      return {\n        ...state,\n        chosenPosts: action.payload,\n      };\n    },\n    setChosenAlbums: (state, action) => {\n      return {\n        ...state,\n        chosenAlbums: action.payload,\n      };\n    },\n  },\n});\n\nexport const selectors = {\n  getUsersInfo: (state: InitialState) => state.users,\n  getPostsInfo: (state: InitialState) => state.posts,\n  getAlbumsInfo: (state: InitialState) => state.albums,\n  getChosenPosts: (state: InitialState) => state.chosenPosts,\n  getChosenAlbums: (state: InitialState) => state.chosenAlbums,\n};\n\nexport const {\n  setUsersInfo,\n  setPostsInfo,\n  setAlbumsInfo,\n  setChosenPosts,\n  setChosenAlbums,\n} = userReducer.actions;\n\nexport const { reducer } = userReducer;\n","import React, {\n  useCallback,\n  // useEffect,\n  // useState,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { selectors } from '../../redux/UserReducer';\n// import { Post } from '../../Types/PostType';\nimport './Posts.scss';\n\nexport const Posts: React.FC = () => {\n  const chosenPosts = useSelector(selectors.getChosenPosts);\n  // const [postsToRender, setPostsToRender] = useState<Post[]>(chosenPosts);\n  const navigate = useNavigate();\n\n  // eslint-disable-next-line no-console\n  console.log(chosenPosts);\n\n  // useEffect(() => {\n  //   const posts = chosenPosts;\n\n  //   setPostsToRender(posts);\n  // }, [chosenPosts]);\n\n  const handlerReturn = useCallback(() => {\n    navigate('/');\n  }, []);\n\n  return (\n    <div className=\"Posts\">\n      <button\n        type=\"button\"\n        title=\"Return to the list of users\"\n        className=\"Posts__returnUsers\"\n        onClick={handlerReturn}\n      >\n        Return to the list of users\n      </button>\n      <ul className=\"Posts__list\">\n        {chosenPosts.map((post) => (\n          <li\n            className=\"Posts__item\"\n            key={post.id}\n          >\n            {post.id}\n            {post.title}\n            {post.body}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getInfoFromServer = async <MyType>(addUrl: string): Promise<MyType> => {\n  const response = await fetch(`${API_URL}${addUrl}`, { method: 'GET' });\n\n  const result = await response.json()\n    .catch((error) => {\n      throw Error(`${error}`);\n    });\n\n  return result;\n};\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { selectors, setChosenPosts } from '../../redux/UserReducer';\nimport { User } from '../../Types/UserType';\nimport './UsersTable.scss';\n\nexport const UsersTable: React.FC = () => {\n  const usersFromServer = useSelector(selectors.getUsersInfo);\n  const gottenPosts = useSelector(selectors.getPostsInfo);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const handlerPosts = useCallback((chosenId) => {\n    const chosenPosts = gottenPosts.filter((post) => post.userId === chosenId);\n\n    dispatch(setChosenPosts(chosenPosts));\n    navigate('/userId');\n  }, [gottenPosts]);\n\n  return (\n    <>\n      {usersFromServer.map((user: User) => (\n        <tr\n          className=\"UsersTable__row\"\n          key={user.id}\n        >\n          <td className=\"UsersTable__text\">\n            {user.id}\n          </td>\n          <td className=\"UsersTable__text\">\n            {user.name}\n          </td>\n          <td className=\"UsersTable__text\">\n            {user.username}\n          </td>\n          <td className=\"UsersTable__text\">\n            <button\n              type=\"button\"\n              title=\"show the posts of the user\"\n              className=\"UsersTable__posts-albums\"\n              onClick={() => handlerPosts(user.id)}\n            >\n              posts\n            </button>\n          </td>\n          <td className=\"UsersTable__text\">\n            <button\n              type=\"button\"\n              title=\"show the Albums of the user\"\n              className=\"UsersTable__posts-albums\"\n            >\n              albums\n            </button>\n          </td>\n        </tr>\n      ))}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getInfoFromServer } from '../../api/api';\nimport {\n  setAlbumsInfo,\n  setPostsInfo,\n  setUsersInfo,\n} from '../../redux/UserReducer';\nimport { Album } from '../../Types/AlbumType';\nimport { Post } from '../../Types/PostType';\nimport { User } from '../../Types/UserType';\nimport { UsersTable } from '../UsersTable';\nimport './UsersInfo.scss';\n\nexport const UsersList: React.FC = () => {\n  const [textError, setTextError] = useState('');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const gottenUsers = await getInfoFromServer<User[]>('users');\n        const gottenPosts = await getInfoFromServer<Post[]>('posts');\n        const gottenAlbums = await getInfoFromServer<Album[]>('albums');\n\n        dispatch(setUsersInfo(gottenUsers));\n        dispatch(setPostsInfo(gottenPosts));\n        dispatch(setAlbumsInfo(gottenAlbums));\n        setTextError('');\n      } catch {\n        setTextError('Something went wrong. Reload the page, please.');\n      }\n    }\n\n    response();\n  }, []);\n\n  return (\n    <div className=\"UsersInfo\">\n      <p className=\"UsersInfo__textError\">\n        {textError}\n      </p>\n      {!textError && (\n        <>\n          <table className=\"UsersInfo__table\">\n            <caption className=\"UsersInfo__title\">\n              Information about users\n            </caption>\n            <thead className=\"UsersInfo__head\">\n              <tr\n                className=\"UsersInfo__head--row\"\n              >\n                <th\n                  className=\"UsersInfo__head--cell\"\n                >\n                  ID\n                </th>\n                <th\n                  className=\"UsersInfo__head--cell\"\n                >\n                  Name\n                </th>\n                <th\n                  className=\"UsersInfo__head--cell\"\n                >\n                  Surname\n                </th>\n                <th\n                  className=\"UsersInfo__head--cell\"\n                >\n                  Posts of the chosen user\n                </th>\n                <th\n                  className=\"UsersInfo__head--cell\"\n                >\n                  Albums of the chosen user\n                </th>\n              </tr>\n            </thead>\n            <tbody\n              className=\"UsersInfo__body\"\n            >\n              <UsersTable />\n            </tbody>\n          </table>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport './App.scss';\nimport { NotFound } from './components/NotFound';\nimport { Posts } from './components/Posts';\nimport { UsersList } from './components/UsersInfo';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/\">\n          <Route index element={<UsersList />} />\n          <Route path=\"userId\" element={<Posts />} />\n        </Route>\n        <Route path=\"*\" element={<NotFound />} />\n      </Routes>\n    </div>\n  );\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport { reducer } from './UserReducer';\n\nconst store = configureStore({ reducer });\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport './index.scss';\nimport { App } from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}