{"version":3,"sources":["components/NotFound/NotFound.tsx","api/api.ts","components/Loader/Loader.tsx","components/Posts/Posts.tsx","redux/UserReducer.ts","components/ModalContent/ModalContent.tsx","components/UsersTable/UsersTable.tsx","components/UsersInfo/UsersInfo.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["NotFound","className","getInfoFromServer","addUrl","a","fetch","method","response","json","catch","error","Error","result","Loader","Spinner","type","caption","Posts","userId","useParams","useState","chosenName","setChosenName","postsToRender","setPostsToRender","textError","setTextError","useEffect","gottenPosts","gottenUser","chosenPosts","filter","post","name","length","title","to","map","id","body","userReducer","createSlice","initialState","users","albums","reducers","setUsersInfo","state","action","payload","setAlbumsInfo","selectors","actions","reducer","ModalContent","chosenAlbums","modalIsClose","onClick","album","customStyles","overlay","backgroundColor","content","top","left","right","bottom","padding","Modal","setAppElement","UsersTable","usersFromServer","useSelector","gottenAlbums","isOpen","setIsOpen","setChosenAlbums","handlerAlbums","useCallback","chosenId","albumsToRender","chosenUser","find","user","username","target","onRequestClose","style","contentLabel","UsersInfo","usersStart","dispatch","useDispatch","gottenUsers","App","path","index","element","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9647bd2.chunk.js","sourcesContent":["import React from 'react';\nimport './NotFound.scss';\n\nexport const NotFound: React.FC = () => {\n  return (\n    <div className=\"NotFound\">\n      This page is not found\n    </div>\n  );\n};\n","const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getInfoFromServer = async <MyType>(addUrl: string): Promise<MyType> => {\n  const response = await fetch(`${API_URL}${addUrl}`, { method: 'GET' });\n\n  const result = await response.json()\n    .catch((error) => {\n      throw Error(`${error}`);\n    });\n\n  return result;\n};\n","import React from 'react';\nimport { Spinner } from '@skbkontur/react-ui';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => {\n  return (\n    <div className=\"Loader\">\n      <div className=\"Loader__container\">\n        <Spinner type=\"big\" caption=\"Loading...\" />\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useEffect,\n  useState,\n} from 'react';\nimport { NavLink, useParams } from 'react-router-dom';\nimport { getInfoFromServer } from '../../api/api';\nimport { Post } from '../../Types/PostType';\nimport { User } from '../../Types/UserType';\nimport { Loader } from '../Loader';\nimport './Posts.scss';\n\nexport const Posts: React.FC = () => {\n  const { userId } = useParams();\n  const [chosenName, setChosenName] = useState('');\n  const [postsToRender, setPostsToRender] = useState<Post[]>([]);\n  const [textError, setTextError] = useState('');\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const gottenPosts = await getInfoFromServer<Post[]>('posts');\n        const gottenUser = await getInfoFromServer<User>(`users/${userId}`);\n\n        if (userId) {\n          const chosenPosts = gottenPosts.filter((post) => post.userId === +userId);\n\n          setPostsToRender(chosenPosts);\n        }\n\n        setChosenName(gottenUser.name);\n        setTextError('');\n      } catch {\n        setTextError('Something went wrong. Reload the page, please.');\n      }\n    }\n\n    response();\n  }, []);\n\n  if (postsToRender.length === 0) {\n    return (<Loader />);\n  }\n\n  return (\n    <div className=\"Posts\">\n      <p className=\"UsersInfo__textError\">\n        {textError}\n      </p>\n      {!textError && (\n        <>\n          <NavLink\n            title=\"Return to the list of users\"\n            className=\"Posts__returnUsers\"\n            to=\"/\"\n          >\n            Return to the list of users\n          </NavLink>\n          <h1 className=\"Posts__name\">\n            {`Posts of the user ${chosenName}`}\n          </h1>\n          <ul className=\"Posts__list\">\n            {postsToRender.map((post) => (\n              <li\n                className=\"Posts__item\"\n                key={post.id}\n              >\n                <p className=\"Posts__id\">\n                  {`ID - ${post.id}`}\n                </p>\n                <h2 className=\"Posts__title\">\n                  {post.title}\n                </h2>\n                <p className=\"Posts__text\">\n                  {post.body}\n                </p>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { Album } from '../Types/AlbumType';\nimport { User } from '../Types/UserType';\n\ninterface InitialState {\n  users: User[],\n  albums: Album[],\n}\n\nconst initialState: InitialState = {\n  users: [],\n  albums: [],\n};\n\nconst userReducer = createSlice({\n  name: 'userInfo',\n  initialState,\n  reducers: {\n    setUsersInfo: (state, action) => {\n      return {\n        ...state,\n        users: action.payload,\n      };\n    },\n    setAlbumsInfo: (state, action) => {\n      return {\n        ...state,\n        albums: action.payload,\n      };\n    },\n  },\n});\n\nexport const selectors = {\n  getUsersInfo: (state: InitialState) => state.users,\n  getAlbumsInfo: (state: InitialState) => state.albums,\n};\n\nexport const {\n  setUsersInfo,\n  setAlbumsInfo,\n} = userReducer.actions;\n\nexport const { reducer } = userReducer;\n","import React from 'react';\nimport { Album } from '../../Types/AlbumType';\nimport './ModalContent.scss';\n\ninterface Props {\n  chosenAlbums: Album[],\n  chosenName: string,\n  modalIsClose: () => void,\n}\n\nexport const ModalContent: React.FC<Props> = ({\n  chosenAlbums,\n  chosenName,\n  modalIsClose,\n}) => {\n  return (\n    <div className=\"ModalContent\">\n      <button\n        type=\"button\"\n        title=\"close the popup\"\n        className=\"ModalContent__button\"\n        onClick={modalIsClose}\n      >\n        X\n      </button>\n      <h1 className=\"ModalContent__title\">\n        {`Albums of the user ${chosenName}`}\n      </h1>\n      <ul className=\"ModalContent__list\">\n        {chosenAlbums.map((album) => (\n          <li\n            className=\"ModalContent__item\"\n            key={album.id}\n          >\n            <div className=\"ModalContent__container\">\n              <p className=\"ModalContent__album-id\">\n                {`ID - ${album.id}`}\n              </p>\n              <p className=\"ModalContent__album-title\">\n                {album.title}\n              </p>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport Modal from 'react-modal';\nimport { useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { selectors } from '../../redux/UserReducer';\nimport { Album } from '../../Types/AlbumType';\nimport { User } from '../../Types/UserType';\nimport { ModalContent } from '../ModalContent';\nimport './UsersTable.scss';\n\nconst customStyles = {\n  overlay: { backgroundColor: 'grey' },\n  content: {\n    top: '50px',\n    left: '150px',\n    right: '150px',\n    bottom: '50px',\n    padding: '10px 80px',\n  },\n};\n\nModal.setAppElement('#root');\n\nexport const UsersTable: React.FC = () => {\n  const usersFromServer = useSelector(selectors.getUsersInfo);\n  const gottenAlbums = useSelector(selectors.getAlbumsInfo);\n  const [isOpen, setIsOpen] = useState(false);\n  const [chosenAlbums, setChosenAlbums] = useState<Album[]>([]);\n  const [chosenName, setChosenName] = useState('');\n\n  const handlerAlbums = useCallback((chosenId) => {\n    const albumsToRender = gottenAlbums.filter((album) => album.userId === chosenId);\n    const chosenUser = usersFromServer.find((user) => user.id === chosenId);\n\n    if (chosenUser) {\n      setChosenName(chosenUser.name);\n    }\n\n    setIsOpen(true);\n    setChosenAlbums(albumsToRender);\n  }, [gottenAlbums, isOpen]);\n\n  const modalIsClose = useCallback(() => {\n    setIsOpen(false);\n  }, [isOpen]);\n\n  return (\n    <>\n      {usersFromServer.map((user: User) => (\n        <tr\n          className=\"UsersTable__row\"\n          key={user.id}\n        >\n          <td className=\"UsersTable__text\">\n            {user.id}\n          </td>\n          <td className=\"UsersTable__text\">\n            {user.name}\n          </td>\n          <td className=\"UsersTable__text\">\n            {user.username}\n          </td>\n          <td className=\"UsersTable__text\">\n            <NavLink\n              title=\"show the posts of the user\"\n              className=\"UsersTable__posts-albums\n              UsersTable__posts\"\n              to={`${user.id}`}\n              target=\"_blank\"\n            >\n              posts\n            </NavLink>\n          </td>\n          <td className=\"UsersTable__text\">\n            <button\n              type=\"button\"\n              title=\"show the Albums of the user\"\n              className=\"UsersTable__posts-albums\n              UsersTable__albums\"\n              onClick={() => handlerAlbums(user.id)}\n            >\n              albums\n            </button>\n          </td>\n        </tr>\n      ))}\n      <Modal\n        isOpen={isOpen}\n        onRequestClose={modalIsClose}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n        <ModalContent\n          chosenAlbums={chosenAlbums}\n          chosenName={chosenName}\n          modalIsClose={modalIsClose}\n        />\n      </Modal>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getInfoFromServer } from '../../api/api';\nimport {\n  selectors,\n  setAlbumsInfo,\n  setUsersInfo,\n} from '../../redux/UserReducer';\nimport { Album } from '../../Types/AlbumType';\nimport { User } from '../../Types/UserType';\nimport { Loader } from '../Loader';\nimport { UsersTable } from '../UsersTable';\nimport './UsersInfo.scss';\n\nexport const UsersInfo: React.FC = () => {\n  const [textError, setTextError] = useState('');\n  const usersStart = useSelector(selectors.getUsersInfo);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const gottenUsers = await getInfoFromServer<User[]>('users');\n        const gottenAlbums = await getInfoFromServer<Album[]>('albums');\n\n        dispatch(setUsersInfo(gottenUsers));\n        dispatch(setAlbumsInfo(gottenAlbums));\n        setTextError('');\n      } catch {\n        setTextError('Something went wrong. Reload the page, please.');\n      }\n    }\n\n    response();\n  }, []);\n\n  if (usersStart.length === 0) {\n    return (<Loader />);\n  }\n\n  return (\n    <div className=\"UsersInfo\">\n      <p className=\"UsersInfo__textError\">\n        {textError}\n      </p>\n      {!textError && (\n        <table className=\"UsersInfo__table\">\n          <caption className=\"UsersInfo__title\">\n            Information about users\n          </caption>\n          <thead className=\"UsersInfo__head\">\n            <tr\n              className=\"UsersInfo__head--row\"\n            >\n              <th\n                className=\"UsersInfo__head--cell\"\n              >\n                ID\n              </th>\n              <th\n                className=\"UsersInfo__head--cell\"\n              >\n                Name\n              </th>\n              <th\n                className=\"UsersInfo__head--cell\"\n              >\n                Username\n              </th>\n              <th\n                className=\"UsersInfo__head--cell\"\n              >\n                Posts of the chosen user\n              </th>\n              <th\n                className=\"UsersInfo__head--cell\"\n              >\n                Albums of the chosen user\n              </th>\n            </tr>\n          </thead>\n          <tbody\n            className=\"UsersInfo__body\"\n          >\n            <UsersTable />\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport './App.scss';\nimport { NotFound } from './components/NotFound';\nimport { Posts } from './components/Posts';\nimport { UsersInfo } from './components/UsersInfo';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/\">\n          <Route index element={<UsersInfo />} />\n          <Route path=\":userId\" element={<Posts />} />\n        </Route>\n        <Route path=\"*\" element={<NotFound />} />\n      </Routes>\n    </div>\n  );\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport { reducer } from './UserReducer';\n\nconst store = configureStore({ reducer });\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport './index.scss';\nimport { App } from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}